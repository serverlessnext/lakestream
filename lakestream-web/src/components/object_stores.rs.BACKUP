use leptos::{html::Input, ev::select};
use leptos::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use wasm_bindgen::prelude::*;
use wasm_bindgen::JsCast;

use crate::utils::local_storage::{load_from_storage, save_to_storage};

const LOCAL_STORAGE_KEY: &str = "OBJECT_STORES";

#[derive(Debug, Clone)]
pub struct ObjectStoreList {
    pub items: Vec<ObjectStore>,
    pub selected_item: RwSignal<Option<Uuid>>,
}

impl ObjectStoreList {
    pub fn new(cx: Scope) -> Self {
        let initial_items = Self::load_from_local_storage(cx);
        let selected_item = create_rw_signal(cx, None);
        Self {
            items: initial_items,
            selected_item,
        }
    }

    pub fn load_from_local_storage(cx: Scope) -> Vec<ObjectStore> {
        load_from_storage::<Vec<ItemSerialized>>(LOCAL_STORAGE_KEY)
            .map(|values| {
                values
                    .into_iter()
                    .map(|stored| stored.into_item(cx))
                    .collect()
            })
            .unwrap_or_default()
    }


    pub fn add(&mut self, item: ObjectStore) {
        self.items.push(item);
    }

    pub fn remove(&mut self, id: Uuid) {
        self.items.retain(|item| item.id != id);
    }
}

#[derive(Debug, Clone)]
pub struct ObjectStore {
    pub id: Uuid,
    pub uri: RwSignal<String>,
    pub selected: RwSignal<bool>,
}

impl ObjectStore {
    pub fn new(cx: Scope, id: Uuid, uri: String) -> Self {
        let uri = create_rw_signal(cx, uri);
        let selected = create_rw_signal(cx, false);
        Self { id, uri, selected }
    }
}

#[derive(Serialize, Deserialize)]
pub struct ItemSerialized {
    pub id: Uuid,
    pub uri: String,
}

impl ItemSerialized {
    pub fn into_item(self, cx: Scope) -> ObjectStore {
        ObjectStore::new(cx, self.id, self.uri)
    }
}

impl From<&ObjectStore> for ItemSerialized {
    fn from(item: &ObjectStore) -> Self {
        Self {
            id: item.id,
            uri: item.uri.get(),
        }
    }
}

#[derive(Debug, Clone)]
pub struct ObjectStoreListContext {
    pub list: ReadSignal<ObjectStoreList>,
    pub set_list: WriteSignal<ObjectStoreList>,
}

impl ObjectStoreListContext {
    pub fn new(
        list: ReadSignal<ObjectStoreList>,
        set_list: WriteSignal<ObjectStoreList>,
    ) -> Self {
        Self { list, set_list }
    }
}

#[component]
pub fn ObjectStoreConfigurator(cx: Scope) -> impl IntoView {
    let (item_list, set_item_list) =
        create_signal(cx, ObjectStoreList::new(cx));

    let context = ObjectStoreListContext::new(item_list.clone(), set_item_list.clone());
    provide_context(cx, context);
    // provide_context(cx, set_item_list);

    let input_ref = create_node_ref::<Input>(cx);
    let item_list_clone = item_list.clone();

    fn parse_input_item(
        cx: Scope,
        input_ref: NodeRef<Input>,
    ) -> Option<ObjectStore> {
        let input = input_ref.get().unwrap();
        let uri = input.value();
        let uri = uri.trim();
        if !uri.is_empty() {
            let new = ObjectStore::new(cx, Uuid::new_v4(), uri.to_string());
            input.set_value("");
            Some(new)
        } else {
            None
        }
    }

    create_effect(cx, move |_| {
        save_to_storage(
            LOCAL_STORAGE_KEY,
            &item_list_clone
                .get()
                .items
                .iter()
                .map(ItemSerialized::from)
                .collect::<Vec<_>>(),
        );
    });

    create_effect(cx, move |_| {
        if let Some(input) = input_ref.get() {
            request_animation_frame(move || {
                let _ = input.focus();
            });
        }
    });

    let input_ref_clone = input_ref.clone();
    view! { cx,
        <div>
            <input class="px-4 py-2"
                placeholder="Bucket URI"
                on:keydown=move |ev: web_sys::KeyboardEvent| {
                    if ev.key() == "Enter" {
                        if let Some(new_item) = parse_input_item(cx, input_ref_clone.clone()) {
                            set_item_list.update(|item_list| item_list.add(new_item));
                        }
                    }
                }
                node_ref=input_ref
            />
            <button class="px-4 py-2" on:click=move |_| {
                if let Some(new_item) = parse_input_item(cx, input_ref_clone.clone()) {
                    set_item_list.update(|item_list| item_list.add(new_item));
                }
            }> "Add Item" </button>
        </div>
        <div>
            <ul>
                <For
                    each={move || item_list.get().items.clone()}
                    key=|item| item.id
                    view=move |cx, item: ObjectStore| view! { cx, <ListItem item /> }
                />
            </ul>
        </div>
    }
}

#[component]
fn ListItem(cx: Scope, item: ObjectStore) -> impl IntoView {
    let context = use_context::<ObjectStoreListContext>(cx).unwrap();
    let set_item = context.set_list;
    let item_id = item.id;
    let item_uri = item.uri.get();

    view! { cx,
        <li>
            <div class="px-4 py-2">
                <a href={format!("/object-stores/{}", item_id)}>
                    {item_uri.clone()}
                </a>
                " | "
                <button class="text-red-500 hover:text-red-700" on:click=move |_| set_item.update(|t| t.remove(item_id))> "delete" </button>
            </div>
        </li>
    }
}

